from lxml import etree
from sqlalchemy.exc import DatabaseError
from sqlalchemy.orm import sessionmaker
from argparse import ArgumentParser
import logging
import logging.config

from configloader import configLoader
from reportattributes import ReportAttributes
from simshab_schemes import DataHabitats
from simshab_schemes import DataSpecies
from simshab_schemes import LuCountryCode
from simshab_schemes import ValidateFields
from simshab_schemes import engine
from utils import generateFilename

logger = logging.getLogger('ExportXML')
logging.config.fileConfig('etc/log.conf', disable_existing_loggers=False)

Session = sessionmaker(bind=engine)
Session.configure(bind=engine)
session = Session()


def xmlAdditionalAttributeValue(tableName, elementName, record):
    if (tableName in ("data_species", "data_greintroduction_of_species")
            and elementName == "speciescode"):
        return {"desc": "", "euniscode": ""}
    elif (tableName in ("data_habitats", "data_species", "data_greport")
            and elementName == "country"):
        return {"isocode": "{0}".format(
            session.query(LuCountryCode).filter(
                LuCountryCode.code == record.country).first().isocode)}
    return {}


def xmlDescAttributeValue(fieldValue, descRelation):
    if descRelation is None:
        return ""
    try:
        return str(engine.execute(
            "SELECT {0}'{1}'".format(descRelation, fieldValue)).first()[0])
    except TypeError as ex:
        if "'NoneType' object has no attribute" in ex.message:
            """
            Is happend when select has no records. Should return ""
            """
            return ""
        raise ex


def xmlCalculateField(record, fieldName):
    logger.debug(fieldName)
    if fieldName == "species_name":
        try:
            return str(
                engine.execute(
                    "select species_name from data_species_check_list where "
                    "member_state='{0}' and natura_2000_code='{1}'".format(
                        record.country, record.speciescode)).first()[0])
        except TypeError as ex:
            if "'NoneType' object has no attribute" in ex.message:
                """
                Is happend when select has no records. Should return ""
                """
                return ""
            raise ex

    return ""


def getTagItems(tableName):
    """
    generate validate fields
    """
    return session.query(ValidateFields).filter(
        ValidateFields.table_name == tableName).order_by(
        ValidateFields.table_name, ValidateFields.xml_order).all()


def convertLinkTableToXML(rootNode, foreign_key, value, table_name,
                          groupElementName, elementName, tableType):
    related_values = engine.execute(
        "select * from {0} where {1}={2}".format(
            table_name, foreign_key, value))

    for related_value in related_values:
        newRootNode = etree.Element(groupElementName)

        tableTagItems = getTagItems(table_name)

        convertRecordToXML(newRootNode, dict(related_value),
                           table_name, tableTagItems)
        rootNode.append(newRootNode)


def getValueFromGeneric(record, item):
    """Always return str
    """
    if type(record) is dict:
        value = record[item]
    else:
        value = getattr(record, item)

    return str(value) if value is not None else ""


def getSubnode(root, item, record, tableName):
    if item.is_related_table:
        value = getValueFromGeneric(record, item.primary_key_field)

        convertLinkTableToXML(
            root, item.foreign_key_field, value, item.field_name, item.xml_tag,
            item.xml_tag, item.table_filter)
    else:
        try:
            fieldValue = getValueFromGeneric(record, item.field_name)
        except (AttributeError, KeyError):
            fieldValue = xmlCalculateField(record, item.field_name)

        additionalAttributesValue = xmlAdditionalAttributeValue(
            tableName, item.field_name, record)

        descValue = xmlDescAttributeValue(fieldValue, item.xml_desc_relation)

        el = etree.Element(item.field_name, desc=descValue)
        el.attrib.update(additionalAttributesValue)
        el.text = fieldValue
        root.append(el)


def convertRecordToXML(rootNode, record, tableName, tableTagItems):
    """
    rootNode: the root node for all nodes generated by function
    record: record to get values
    tableName: tableName to get additional attributes
    tableTagItems: xml generator
    """
    previousTagGroup = None

    for idx in range(len(tableTagItems)):
        item = tableTagItems[idx]

        if item.xml_tag_section != previousTagGroup:
            if previousTagGroup is not None:
                return
            if item.xml_tag_section is not None:
                newRootNode = etree.Element(item.xml_tag_section)
                getSubnode(newRootNode, item, record, tableName)
                rootNode.append(newRootNode)
            previousTagGroup = item.xml_tag_section
        else:
            getSubnode(rootNode, item, record, tableName)


if __name__ == "__main__":
    logger.info("Just started !")

    parser = ArgumentParser(description="export data to xml format")
    parser.add_argument("xml_path",
                        help="path to location for saving xml file")
    parser.add_argument("report", help=("the report type; "
                                        "choise between species or habitats"),
                        choices=["species", "habitats"])

    args = parser.parse_args()

    reportAttributes = ReportAttributes(args.report)

    try:
        tableTagItems = getTagItems(reportAttributes.table_name)

        if args.report == "species":
            mappedData = (session.query(DataSpecies).filter(
                DataSpecies.export == 1,
                DataSpecies.speciescode == '1188').first(),
            )
        elif args.report == "habitats":
            mappedData = (session.query(DataHabitats).filter(
                DataSpecies.export == 1).first(),
            )

        #speciesRs = engine.execute(
        #    ("select * from data_species where data_species.export = 1 and  "
        #     "data_species.speciescode = '1188'"))

        NS = 'http://www.w3.org/2001/XMLSchema-instance'
        location_attribute = '{%s}noNameSpaceSchemaLocation' % NS

        export_xml = etree.Element(
            reportAttributes.xml_root_tag,
            attrib={location_attribute: configLoader.xml_schema_species})
        """
        set the language
        """
        attr = export_xml.attrib
        attr['{http://www.w3.org/XML/1998/namespace}lang'] = "en"

        for md in mappedData:
            root_node = etree.Element(reportAttributes.xml_report_tag)
            xml_nodes = convertRecordToXML(root_node, md,
                                           reportAttributes.table_name,
                                           tableTagItems)
            export_xml.append(root_node)

        fileNameExport = generateFilename(
            args.xml_path, "RO", "_{0}".format(reportAttributes.xml_root_tag))
        with open(fileNameExport, "w") as xml_file:
            xml_file.write(etree.tostring(export_xml, pretty_print=True,
                                          xml_declaration=True,
                                          encoding='UTF-8'))
        logger.info("Generated filename: {0} with success".format(
            fileNameExport))

    except DatabaseError as ex:
        logger.critical("{0}".format(ex))
