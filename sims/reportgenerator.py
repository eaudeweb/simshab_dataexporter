from lxml import etree
from sqlalchemy.orm import sessionmaker
import logging

from simshab_schemes import DataHabitats
from simshab_schemes import DataSpecies
from simshab_schemes import ValidateFields
from simshab_schemes import engine
from utils import getValueFromGeneric
from xmlgenerator import XMLGenerator
from xmlgenerator import generateNewNode
from xmlgenerator import getCountryISOCode
from xmlgenerator import xmlDescAttributeValue
from sqlalchemy.exc import DatabaseError


logger = logging.getLogger('xmlgenerator')


class ReportGenerator(XMLGenerator):
    """Callable class. It knows how to generate report xml.
    """
    def __init__(self, report_type, configLoader):
        super(ReportGenerator, self).__init__(configLoader.xml_root_tag,
                                              configLoader.xml_schema)
        self.report_type = report_type
        self.table_name = configLoader.table_name
        self.xml_report_tag = configLoader.xml_report_tag
        Session = sessionmaker(bind=engine)
        Session.configure(bind=engine)
        self.session = Session()

    def getTagItems(self, tableName):
        """
        generate validate fields
        """
        return self.session.query(ValidateFields).filter(
            ValidateFields.table_name == tableName).order_by(
            ValidateFields.table_name, ValidateFields.xml_order).all()

    def xmlAdditionalAttributeValue(self, tableName, elementName, record):
        if (tableName in ("data_species", "data_greintroduction_of_species")
                and elementName == "speciescode"):
            return {"desc": "", "euniscode": ""}
        elif (tableName in ("data_habitats", "data_species", "data_greport")
                and elementName == "country"):
            return {"isocode": "{0}".format(getCountryISOCode(record.country))}
        return {}

    def convertLinkTableToXML(self, rootNode, foreign_key, value, table_name,
                              groupElementName, elementName, tableType):
        if table_name == 'data_species_regions':
            extra = ' AND cons_dataset_id=1'
        else:
            extra = ''
        query ="select * from {0} where {1}={2} {3}".format(
                table_name, foreign_key, value, extra)
        related_values = engine.execute(query)
        for related_value in related_values:
            newRootNode = generateNewNode(rootNode, groupElementName)
            self.convertRecordToXML(newRootNode, dict(related_value),
                                    table_name, self.getTagItems(table_name))

    def xmlCalculateField(self, record, fieldName):
        logger.debug(fieldName)
        if fieldName == "species_name":
            try:
                return str(
                    engine.execute(
                        ("select species_name from data_species_check_list"
                         " where member_state='{0}' and natura_2000_code='{1}'"
                         "").format(record.country,
                                    record.speciescode)).first()[0])
            except TypeError as ex:
                if "'NoneType' object has no attribute" in ex.message:
                    """
                    Is happend when select has no records. Should return ""
                    """
                    return ""
                raise ex

        return ""

    def getSubnode(self, root, item, record, tableName):
        if item.is_related_table:
            value = getValueFromGeneric(record, item.primary_key_field)

            self.convertLinkTableToXML(
                root, item.foreign_key_field, value, item.field_name,
                item.xml_tag, item.xml_tag, item.table_filter)
        else:
            try:
                fieldValue = getValueFromGeneric(record, item.field_name)
            except (AttributeError, KeyError):
                fieldValue = self.xmlCalculateField(record, item.field_name)

            additionalAttributesValue = self.xmlAdditionalAttributeValue(
                tableName, item.field_name, record)

            descValue = xmlDescAttributeValue(fieldValue,
                                              item.xml_desc_relation)

            if descValue:
                el = etree.Element(item.xml_tag, desc=descValue)
            else:
                el = etree.Element(item.xml_tag)
            el.attrib.update(additionalAttributesValue)
            el.text = fieldValue
            root.append(el)

    def convertRecordToXML(self, rootNode, record, tableName, tableTagItems):
        """
        rootNode: the root node for all nodes generated by function
        record: record to get values
        tableName: tableName to get additional attributes
        tableTagItems: xml generator
        """
        previousTagGroup = None

        for idx, item in enumerate(tableTagItems):
            if item.xml_tag_section != previousTagGroup:
                if previousTagGroup is not None:
                    return
                if item.xml_tag_section is not None:
                    newRootNode = etree.Element(item.xml_tag_section)
                    self.getSubnode(newRootNode, item, record, tableName)
                    rootNode.append(newRootNode)
                previousTagGroup = item.xml_tag_section
            else:
                self.getSubnode(rootNode, item, record, tableName)
                previousTagGroup = item.xml_tag_section

    def __call__(self):
        try:
            tableTagItems = self.getTagItems(self.table_name)

            if self.report_type == "species":
                mappedData = (self.session.query(DataSpecies).filter(
                    DataSpecies.export == 1,
                    DataSpecies.speciescode == '1188').first(),
                )
            elif self.report_type == "habitats":
                mappedData = (self.session.query(DataHabitats).filter(
                    DataSpecies.export == 1).first(),
                )

            #speciesRs = engine.execute(
            #    ("select * from data_species where data_species.export = 1
            #and  "
            #     "data_species.speciescode = '1188'"))

            for md in mappedData:
                root_node = generateNewNode(None, self.xml_report_tag)
                self.convertRecordToXML(root_node, md,
                                        self.table_name, tableTagItems)
                self.export_xml.append(root_node)

            return self.__str__()
        except DatabaseError as ex:
            logger.critical("{0}".format(ex))
